document.getElementById('save-button').addEventListener('click', () => {    const filename = document.getElementById('filename').value;    const eqtContent = document.getElementById('eqt-content').value;    if (!filename) {        alert('Please enter a filename.');        return;    }    const jsonString = convertEqtToJson(filename, eqtContent);    const blob = new Blob([jsonString], { type: 'application/json' });    const url = URL.createObjectURL(blob);    const a = document.createElement('a');    a.href = url;    a.download = `${filename}.json`;    document.body.appendChild(a);    a.click();    document.body.removeChild(a);    URL.revokeObjectURL(url);});function convertEqtToJson(filename, eqtContent) {    const lines = eqtContent.split('\n');    let preamp = 0.0;    const bands = [        { "type": 0, "channels": 0, "frequency": 90, "q": 0.800000011920929, "gain": 0.0, "color": 0 },        { "type": 1, "channels": 0, "frequency": 10000, "q": 0.6000000238418579, "gain": 0.0, "color": 0 }    ];    for (const line of lines) {        const trimmedLine = line.trim();        if (trimmedLine.startsWith('Preamp:')) {            const parts = trimmedLine.split(/\s+/);            if (parts.length >= 2) {                preamp = parseFloat(parts[1]) || 0.0;            }            continue;        }        const filterMatch = trimmedLine.match(/^Filter(\s+\d+)?:/);        if (filterMatch) {            const filterDataString = trimmedLine.substring(filterMatch[0].length).trim();            const parts = filterDataString.split(/\s+/);            if (parts.length < 10 || parts[0] !== 'ON') {                continue;            }            const filter = {                "channels": 0,                "color": 0            };            const typeStr = parts[1];            switch (typeStr) {                case 'LSC': filter.type = 4; break;                case 'HSC': filter.type = 5; break;                case 'PK': filter.type = 3; break;                case 'BP': filter.type = 2; break;                case 'HP': filter.type = 1; break;                case 'LP': filter.type = 0; break;                default: continue;            }            filter.frequency = parseFloat(parts[3]);            filter.gain = parseFloat(parts[6]);            filter.q = parseFloat(parts[9]);            if (!isNaN(filter.frequency) && !isNaN(filter.gain) && !isNaN(filter.q)) {                bands.push(filter);            }        }    }    const result = [{        "name": filename,        "preamp": preamp,        "parametric": true,        "bands": bands    }];    return JSON.stringify(result, null, 2);}